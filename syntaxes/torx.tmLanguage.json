{
    "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
    "name": "Torx",
    "scopeName": "text.torx",
    "injections": {
        "L:text.torx": {
            "patterns": [
                {
                    "include": "#torx-comment"
                }
            ],
            "repository": {
                "torx-comment": {
                    "begin": "\\@\\*",
                    "captures": {
                        "0": {
                            "name": "punctuation.definition.comment.torx"
                        }
                    },
                    "end": "\\*\\@",
                    "name": "comment.block.torx"
                }
            }
        }
    },
    "patterns": [
        {
            "include": "#xml"
        },
        {
            "include": "#json"
        },
        {
            "include": "#sql"
        },
        {
            "include": "#torx"
        }
    ],
    "repository": {
        "torx": {
            "patterns": [
                {
                    "include": "#torx-code-block"
                },
                {
                    "include": "#escape-entity"
                },
                {
                    "include": "#torx-statement"
                },
                {
                    "include": "#torx-function"
                },
                {
                    "include": "#torx-include"
                },
                {
                    "include": "#torx-else-if"
                },
                {
                    "include": "#torx-else"
                },
                {
                    "include": "#explicit-torx-expression"
                },
                {
                    "include": "#implicit-torx-expression"
                },
                {
                    "include": "#torx-illegal"
                }
            ],
            "repository": {
                "torx-code-block": {
                    "begin": "\\@\\{",
                    "captures": {
                        "0": {
                            "name": "keyword.control.torx"
                        }
                    },
                    "patterns": [
                        {
                            "include": "source.ts"
                        }
                    ],
                    "end": "\\}"
                },
                "escape-entity": {
                    "match": "\\@\\@",
                    "name": "keyword.control.torx"
                },
                "explicit-torx-expression": {
                    "name": "meta.expression.explicit.torx",
                    "begin": "(\\@)\\(",
                    "captures": {
                        "0": {
                            "name": "keyword.control.torx"
                        }
                    },
                    "patterns": [
                        {
                            "include": "source.ts"
                        }
                    ],
                    "end": "\\)"
                },
                "implicit-torx-expression": {
                    "name": "meta.expression.implicit.torx",
                    "match": "(?<!@)@((\\w+)((?=\\.\\w)\\.\\w+)*((?=\\(.*\\))\\(.*\\))?((?=\\[.*\\]).*\\])?)",
                    "captures": {
                        "0": {
                            "name": "keyword.control.torx"
                        },
                        "1": {
                            "patterns": [
                                {
                                    "include": "source.ts"
                                }
                            ]
                        }
                    }
                },
                "torx-statement": {
                    "begin": "@(?:for|if)\\s*\\((.*)\\)\\s*\\{",
                    "captures": {
                        "0": {
                            "name": "keyword.control.torx"
                        },
                        "1": {
                            "patterns": [
                                {
                                    "include": "source.ts"
                                }
                            ]
                        }
                    },
                    "patterns": [
                        {
                            "include": "text.torx"
                        }
                    ],
                    "end": "\\}(?! else {)"
                },
                "torx-function": {
                    "begin": "\\@function\\s(\\w+\\s?\\(.*\\))\\s*\\{",
                    "captures": {
                        "0": {
                            "name": "keyword.control.torx"
                        },
                        "1": {
                            "patterns": [
                                {
                                    "include": "source.js#function-name"
                                },
                                {
                                    "include": "source.js#function-body"
                                }
                            ]
                        }
                    },
                    "end": "\\}",
                    "patterns": [
                        {
                            "include": "text.torx"
                        }
                    ]
                },
                "torx-include": {
                    "match": "@include\\((.*)\\)",
                    "captures": {
                        "0": {
                            "name": "keyword.control.torx"
                        },
                        "1": {
                            "patterns": [
                                {
                                    "include": "source.ts"
                                }
                            ]
                        }
                    }
                },
                "torx-else-if": {
                    "begin": "(else\\sif)\\s?(\\(.*\\))\\s*\\{",
                    "captures": {
                        "0": {
                            "name": "keyword.control.torx"
                        },
                        "2": {
                            "patterns": [
                                {
                                    "include": "source.ts"
                                }
                            ]
                        }
                    },
                    "patterns": [
                        {
                            "include": "text.torx"
                        }
                    ],
                    "end": "\\}"
                },
                "torx-else": {
                    "begin": "}\\s*else\\s*\\{",
                    "captures": {
                        "0": {
                            "name": "keyword.control.torx"
                        }
                    },
                    "patterns": [
                        {
                            "include": "text.torx"
                        }
                    ],
                    "end": "\\}"
                },
                "torx-illegal": {
                    "match": "\\@[^\\w]",
                    "name": "invalid.illegal.bad-entity.torx"
                }
            }
        },
        "xml": {
            "patterns": [
                {
                    "match": "<\\/?([^\\s\\<\\>]+)>",
                    "captures": {
                        "0": {
                            "name": "punctuation.definition.tag.xml"
                        },
                        "1": {
                            "name": "entity.name.tag.xml"
                        }
                    },
                    "name": "meta.tag.xml"
                },
                {
                    "begin": "<([^\\s\\<\\>\\/]+)",
                    "beginCaptures": {
                        "0": {
                            "name": "punctuation.definition.tag.xml"
                        },
                        "1": {
                            "name": "entity.name.tag.xml",
                            "patterns": [
                                {
                                    "include": "#torx"
                                }
                            ]
                        }
                    },
                    "end": "(\\/?)>",
                    "endCaptures": {
                        "0": {
                            "name": "entity.name.tag.xml"
                        },
                        "1": {
                            "name": "punctuation.definition.tag.xml"
                        }
                    },
                    "name": "meta.tag.xml",
                    "patterns": [
                        {
                            "include": "#torx"
                        },
                        {
                            "include": "#strings"
                        },
                        {
                            "match": "([^\\s]+)=",
                            "captures": {
                                "1": {
                                    "name": "support.type.object.html-attribute",
                                    "patterns": [
                                        {
                                            "include": "#torx"
                                        }
                                    ]
                                }
                            }
                        }
                    ]
                }
            ]
        },
        "json": {
            "patterns": [
                {
                    "name": "meta.language.json",
                    "begin": "\\{",
                    "end": "\\}",
                    "patterns": [
                        {
                            "include": "#torx"
                        },
                        {
                            "include": "#strings"
                        },
                        {
                            "include": "#numbers"
                        }
                    ]
                }
            ]
        },
        "sql": {
            "patterns": [
                {
                    "name": "string.uppercase.sql",
                    "match": "(\\s|^)[A-Z]{2,}(\\s|$)",
                    "captures": {
                        "0": {
                            "name": "variable.language.sql"
                        }
                    }
                },
                {
                    "name": "string.quoted.sql",
                    "begin": "`",
                    "beginCaptures": {
                        "0": {
                            "name": "punctuation.definition.string.begin.sql"
                        }
                    },
                    "end": "`",
                    "endCaptures": {
                        "0": {
                            "name": "punctuation.definition.string.end.sql"
                        }
                    }
                },
                {
                    "include": "#numbers"
                }
            ]
        },
        "strings": {
            "patterns": [
                {
                    "name": "string.quoted.single.text",
                    "begin": "'",
                    "beginCaptures": {
                        "0": {
                            "name": "punctuation.definition.string.begin.text"
                        }
                    },
                    "end": "'",
                    "endCaptures": {
                        "0": {
                            "name": "punctuation.definition.string.end.text"
                        }
                    },
                    "patterns": [
                        {
                            "include": "#torx"
                        }
                    ]
                },
                {
                    "name": "string.quoted.double.text",
                    "begin": "\"",
                    "beginCaptures": {
                        "0": {
                            "name": "punctuation.definition.string.begin.text"
                        }
                    },
                    "end": "\"",
                    "endCaptures": {
                        "0": {
                            "name": "punctuation.definition.string.end.text"
                        }
                    },
                    "patterns": [
                        {
                            "include": "#torx"
                        }
                    ]
                }
            ]
        },
        "numbers": {
            "name": "number.text",
            "match": "\\d+",
            "captures": {
                "0": {
                    "name": "constant.numeric.text"
                }
            }
        }
    }
}